(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{MMwm:function(e,t,n){"use strict";n.r(t),n.d(t,"RichTextExampleModule",(function(){return J}));var a=n("2kYt"),i=n("nIj0"),r=n("zmEM"),l=n("29Wa"),s=n("FlRo"),o=n("5Bw9"),c=n("3WCQ"),d=n("bAHF"),m=n("sEIs"),p=n("C05f"),h=n("J+dc"),u=n("8j5Y"),x=n("NU+T"),f=n("EM62"),b=n("OYCi");let g=(()=>{class e{constructor(e){this.apiService=e,this.api$=new p.a(null),this.components=[{name:"RichTextInputComponent",selector:"atlas-rich-text-input",implements:["ControlValueAccessor","AfterViewInit","OnDestroy"],inputs:[{name:"config",type:"RichTextConfiguration",description:"Sets the configuration of the component"},{name:"isDarkMode",type:"boolean",description:"Tells the component whether it is in dark mode or not."},{name:"error",type:"boolean",description:"If not using ngModel or a FormControl, shows or hides an error indication and an error message from atlas-rich-text-error.\n      If using either ngModel or a FormControl, instead add validators for this functionality."}],outputs:[{name:"valueChange",type:"RichTextInputChangeEvent",description:"Emits when the content being edited is updated."}]}],this.directives=[],this.imports=["import { RichTextModule } from @atlas/ui-rich-text"],this.expandedTypes=[{name:"RichTextConfiguration",properties:[{name:"height/width",type:"number | string",description:'The starting dimensions of the rich-text-editor which can be any valid CSS size value (ex: "100px" or "100%").  By default, width: 100%, height: 400px.'},{name:"resize",type:"boolean | both",description:"Sets the resize mode of the rich text editor area.  If 'both', it can be resized both horizontally and vertically, otherwise it can only be resized vertically."},{name:"minHeight/maxHeight",type:"number | string",description:"The vertical limits of a resize.  Only used if resize is true or 'both'."},{name:"minWidth/maxWidth",type:"number | string",description:"The horizontal limits of a resize.  Only used if resize is 'both'."},{name:"features",type:"RichTextFeature[]",description:"Sets the editing features that are displayed and enabled for the user. By default, UndoRedo, FontAccent, TextAlignment, List, and TextTabbing are enabled.\n        The Feature tab has more details."},{name:"menubar",type:"RichTextMenubarItems",description:"If provided, will be displayed in a menu bar on top of the Rich Text Editor."},{name:"contextMenu",type:"ContextMenuItem[]",description:"This will add actions to a context menu.  If there's a context menu, Ctrl + Right Click will access the native context menu."},{name:"customElements",type:"string",description:"Given a regex-like string, the text editor will process any non-HTML element here as a an HTML element."},{name:"extendedValidElements",type:"string",description:"Given a regex-like string, the text editor will process any HTML element here as an additional element, not just elements that the Rich Text Editor has determined to be safe."},{name:"toolbar",type:"RichTextToolbars",description:"Sets up the toolbars.  Toolbars are grouped into toolbar rows, then in divided groups.  If empty, each item in features will put in default toolbar items into 1 row."},{name:"statusBar",type:"boolean",description:"If there's a value here, this value will decide whether to show the status bar.  Otherwise, only if any feature that is chosen uses the status bar will it show."},{name:"outputType",type:"SupportedTypes",description:"Determines the output type of the Rich Text Input.  Defaults to returning HTML."},{name:"textReplacementMenu",type:"RichTextReplacementItem[]",description:"This creates the list of items that can be added as placeholders, when using the TextReplacement feature."},{name:"fileUploader",type:"(file: File) => Observable<FileUploadResponse>",description:"When using the UploadImage feature, this function will be called whenever the user attempts to upload a file.  The Observable\n        should return a FileUploadResponse, which can either mark the file's progress or completion, or be thrown with an error message for the user."},{name:"imageList",type:"ImageList",description:"This creates a list of images as suggestions for the user to be able to insert when using the UploadImage or SelectImage feature."}]}]}ngOnInit(){this.apiService.getApi(this.components,this.directives,this.imports,this.expandedTypes).pipe(Object(h.a)(1),Object(u.a)(e=>this.api$.next(e))).subscribe()}}return e.\u0275fac=function(t){return new(t||e)(f["\u0275\u0275directiveInject"](x.a))},e.\u0275cmp=f["\u0275\u0275defineComponent"]({type:e,selectors:[["atlas-rich-text-api"]],decls:2,vars:3,consts:[["title","Rich Text Input",3,"api"]],template:function(e,t){1&e&&(f["\u0275\u0275element"](0,"atlas-shared-docs-api",0),f["\u0275\u0275pipe"](1,"async")),2&e&&f["\u0275\u0275property"]("api",f["\u0275\u0275pipeBind1"](1,1,t.api$))},directives:[b.a],pipes:[a.b],encapsulation:2,changeDetection:0}),e})();var y=n("bwdy"),E=n("GRIB"),S=n("vER0"),v=n("H66U"),w=n("x78X"),T=n("CAH9"),k=n("YtkY"),M=n("KCEv"),I=n("e4iD");const $={text:"<p>Testing, Testing</p><br/> <p>1 2 3</p>"};let C=(()=>{class e extends T.t{constructor(e,t){super({initialState:$,subjectConstructor:T.l,validatorMap:{}}),this.sanitizer=e,this.themeService=t,this.styledOutput$=this.model.text.value$.pipe(Object(k.a)(e=>this.sanitizer.bypassSecurityTrustHtml(e))),this.isDarkMode$=this.themeService.theme$.pipe(Object(k.a)(e=>e===M.a.DarkTheme))}}return e.\u0275fac=function(t){return new(t||e)(f["\u0275\u0275directiveInject"](I.b),f["\u0275\u0275directiveInject"](T.v))},e.\u0275cmp=f["\u0275\u0275defineComponent"]({type:e,selectors:[["atlas-rich-text-basic-use-example"]],features:[f["\u0275\u0275InheritDefinitionFeature"]],decls:7,vars:7,consts:[[3,"formControl","darkMode"],[1,"compact"],[3,"innerHTML"]],template:function(e,t){1&e&&(f["\u0275\u0275elementStart"](0,"section"),f["\u0275\u0275element"](1,"atlas-rich-text-input",0),f["\u0275\u0275pipe"](2,"async"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](3,"h3",1),f["\u0275\u0275text"](4,"Result"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275element"](5,"section",2),f["\u0275\u0275pipe"](6,"async")),2&e&&(f["\u0275\u0275advance"](1),f["\u0275\u0275property"]("formControl",t.model.text.formControl)("darkMode",f["\u0275\u0275pipeBind1"](2,3,t.isDarkMode$)),f["\u0275\u0275advance"](4),f["\u0275\u0275property"]("innerHTML",f["\u0275\u0275pipeBind1"](6,5,t.styledOutput$),f["\u0275\u0275sanitizeHtml"]))},directives:[c.c,i.k,i.e],pipes:[a.b],encapsulation:2,changeDetection:0}),e})();var j=n("ROBh");const R={text:"# Testing Testing \n\n 123"};let O=(()=>{class e extends T.t{constructor(e,t){super({initialState:R,subjectConstructor:T.l,validatorMap:{}}),this.themeService=e,this.sanitizer=t,this.isDarkMode$=this.themeService.theme$.pipe(Object(k.a)(e=>e===M.a.DarkTheme)),this.configuration$=Object(j.a)({outputType:c.e.Markdown}),this.displayedMarkdown$=this.model.text.value$.pipe(Object(k.a)(e=>this.sanitizer.bypassSecurityTrustHtml(e.replace(/\n/g,"\\n"))))}}return e.\u0275fac=function(t){return new(t||e)(f["\u0275\u0275directiveInject"](T.v),f["\u0275\u0275directiveInject"](I.b))},e.\u0275cmp=f["\u0275\u0275defineComponent"]({type:e,selectors:[["atlas-rich-text-markdown-output-example"]],features:[f["\u0275\u0275InheritDefinitionFeature"]],decls:8,vars:10,consts:[[3,"formControl","darkMode","config"],[1,"compact"],[3,"innerHTML"]],template:function(e,t){1&e&&(f["\u0275\u0275elementStart"](0,"section"),f["\u0275\u0275element"](1,"atlas-rich-text-input",0),f["\u0275\u0275pipe"](2,"async"),f["\u0275\u0275pipe"](3,"async"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](4,"h3",1),f["\u0275\u0275text"](5,"Raw Markdown"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275element"](6,"section",2),f["\u0275\u0275pipe"](7,"async")),2&e&&(f["\u0275\u0275advance"](1),f["\u0275\u0275property"]("formControl",t.model.text.formControl)("darkMode",f["\u0275\u0275pipeBind1"](2,4,t.isDarkMode$))("config",f["\u0275\u0275pipeBind1"](3,6,t.configuration$)),f["\u0275\u0275advance"](5),f["\u0275\u0275property"]("innerHTML",f["\u0275\u0275pipeBind1"](7,8,t.displayedMarkdown$),f["\u0275\u0275sanitizeHtml"]))},directives:[c.c,i.k,i.e],pipes:[a.b],encapsulation:2,changeDetection:0}),e})();const D={text:"<p>Testing, Testing</p><br/> <p>1 2 3</p>"};let H=(()=>{class e extends T.t{constructor(e,t){super({initialState:D,subjectConstructor:T.l,validatorMap:{}}),this.sanitizer=e,this.themeService=t,this.styledOutput$=this.model.text.value$.pipe(Object(k.a)(e=>this.sanitizer.bypassSecurityTrustHtml(e))),this.isDarkMode$=this.themeService.theme$.pipe(Object(k.a)(e=>e===M.a.DarkTheme)),this.configuration$=Object(j.a)(Object.assign(Object.assign({},c.a),{features:[...c.a.features,c.b.TextReplacement],textReplacementMenu:[{friendlyText:"YoY Sales",placeholderName:"DATABASE.YOY-SALES"},{friendlyText:"Week over Week Sales",placeholderName:"DATABASE.WOW-SALES"}]}))}}return e.\u0275fac=function(t){return new(t||e)(f["\u0275\u0275directiveInject"](I.b),f["\u0275\u0275directiveInject"](T.v))},e.\u0275cmp=f["\u0275\u0275defineComponent"]({type:e,selectors:[["atlas-rich-text-replacement-text-example"]],features:[f["\u0275\u0275InheritDefinitionFeature"]],decls:8,vars:10,consts:[[3,"formControl","darkMode","config"],[1,"compact"],[3,"innerHTML"]],template:function(e,t){1&e&&(f["\u0275\u0275elementStart"](0,"section"),f["\u0275\u0275element"](1,"atlas-rich-text-input",0),f["\u0275\u0275pipe"](2,"async"),f["\u0275\u0275pipe"](3,"async"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](4,"h3",1),f["\u0275\u0275text"](5,"Result"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275element"](6,"section",2),f["\u0275\u0275pipe"](7,"async")),2&e&&(f["\u0275\u0275advance"](1),f["\u0275\u0275property"]("formControl",t.model.text.formControl)("darkMode",f["\u0275\u0275pipeBind1"](2,4,t.isDarkMode$))("config",f["\u0275\u0275pipeBind1"](3,6,t.configuration$)),f["\u0275\u0275advance"](5),f["\u0275\u0275property"]("innerHTML",f["\u0275\u0275pipeBind1"](7,8,t.styledOutput$),f["\u0275\u0275sanitizeHtml"]))},directives:[c.c,i.k,i.e],pipes:[a.b],encapsulation:2,changeDetection:0}),e})();const F={text:"<p>Testing, Testing</p><br/> <p>1 2 3</p>"};let A=(()=>{class e extends T.t{constructor(e,t){super({initialState:F,subjectConstructor:T.l,validatorMap:{}}),this.sanitizer=e,this.themeService=t,this.styledOutput$=this.model.text.value$.pipe(Object(k.a)(e=>this.sanitizer.bypassSecurityTrustHtml(e))),this.isDarkMode$=this.themeService.theme$.pipe(Object(k.a)(e=>e===M.a.DarkTheme)),this.configuration$=Object(j.a)({features:[...c.a.features,c.b.UploadImage,c.b.Links,c.b.Table],fileUploader:e=>(alert("For more complex cases, you can add a dialog here to help direct or name the image.  The image you uploaded will be replaced by an Atlas logo in lieu of uploading your image."),Object(j.a)({status:200,targetUrl:"assets/logo_small.png"}))})}}return e.\u0275fac=function(t){return new(t||e)(f["\u0275\u0275directiveInject"](I.b),f["\u0275\u0275directiveInject"](T.v))},e.\u0275cmp=f["\u0275\u0275defineComponent"]({type:e,selectors:[["atlas-rich-text-advanced-editing-example"]],features:[f["\u0275\u0275InheritDefinitionFeature"]],decls:8,vars:10,consts:[[3,"formControl","darkMode","config"],[1,"compact"],[3,"innerHTML"]],template:function(e,t){1&e&&(f["\u0275\u0275elementStart"](0,"section"),f["\u0275\u0275element"](1,"atlas-rich-text-input",0),f["\u0275\u0275pipe"](2,"async"),f["\u0275\u0275pipe"](3,"async"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](4,"h3",1),f["\u0275\u0275text"](5,"Result"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275element"](6,"section",2),f["\u0275\u0275pipe"](7,"async")),2&e&&(f["\u0275\u0275advance"](1),f["\u0275\u0275property"]("formControl",t.model.text.formControl)("darkMode",f["\u0275\u0275pipeBind1"](2,4,t.isDarkMode$))("config",f["\u0275\u0275pipeBind1"](3,6,t.configuration$)),f["\u0275\u0275advance"](5),f["\u0275\u0275property"]("innerHTML",f["\u0275\u0275pipeBind1"](7,8,t.styledOutput$),f["\u0275\u0275sanitizeHtml"]))},directives:[c.c,i.k,i.e],pipes:[a.b],encapsulation:2,changeDetection:0}),e})(),z=(()=>{class e{constructor(e){this.codeFileService=e,this.subscriptions=new y.a,this.basicExample$=new p.a(null),this.markdownExample$=new p.a(null),this.replacementTextExample$=new p.a(null),this.basicExample=["assets/example-files/rich-text/basic-use-example/basic-use-example.component.html","assets/example-files/rich-text/basic-use-example/basic-use-example.component.ts"],this.markdownExample=["assets/example-files/rich-text/markdown-output-example/markdown-output-example.component.html","assets/example-files/rich-text/markdown-output-example/markdown-output-example.component.ts"],this.replacementTextExample=["assets/example-files/rich-text/replacement-text-example/replacement-text-example.component.html","assets/example-files/rich-text/replacement-text-example/replacement-text-example.component.ts"],this.advancedEditingExample=["assets/example-files/rich-text/advanced-editing-example/advanced-editing-example.component.html","assets/example-files/rich-text/advanced-editing-example/advanced-editing-example.component.ts"],this.advancedEditingExample$=this.codeFileService.loadFiles(this.advancedEditingExample)}ngOnInit(){this.subscriptions.add(this.codeFileService.loadFiles(this.basicExample).subscribe(e=>{this.basicExample$.next(e)})),this.subscriptions.add(this.codeFileService.loadFiles(this.markdownExample).subscribe(e=>{this.markdownExample$.next(e)})),this.subscriptions.add(this.codeFileService.loadFiles(this.replacementTextExample).subscribe(e=>{this.replacementTextExample$.next(e)}))}}return e.\u0275fac=function(t){return new(t||e)(f["\u0275\u0275directiveInject"](E.a))},e.\u0275cmp=f["\u0275\u0275defineComponent"]({type:e,selectors:[["atlas-rich-text-input-example"]],decls:25,vars:12,consts:[["title","Rich Text Inputs with sample output"],[3,"codeExample"]],template:function(e,t){1&e&&(f["\u0275\u0275elementStart"](0,"atlas-shared-docs-example",0),f["\u0275\u0275elementStart"](1,"atlas-code-example",1),f["\u0275\u0275pipe"](2,"async"),f["\u0275\u0275elementStart"](3,"atlas-code-example-header"),f["\u0275\u0275elementStart"](4,"h3"),f["\u0275\u0275text"](5,"Basic Usage"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275element"](6,"atlas-rich-text-basic-use-example"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](7,"atlas-code-example",1),f["\u0275\u0275pipe"](8,"async"),f["\u0275\u0275elementStart"](9,"atlas-code-example-header"),f["\u0275\u0275elementStart"](10,"h3"),f["\u0275\u0275text"](11,"Markdown Output"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275element"](12,"atlas-rich-text-markdown-output-example"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](13,"atlas-code-example",1),f["\u0275\u0275pipe"](14,"async"),f["\u0275\u0275elementStart"](15,"atlas-code-example-header"),f["\u0275\u0275elementStart"](16,"h3"),f["\u0275\u0275text"](17,"Replacement Text"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275element"](18,"atlas-rich-text-replacement-text-example"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](19,"atlas-code-example",1),f["\u0275\u0275pipe"](20,"async"),f["\u0275\u0275elementStart"](21,"atlas-code-example-header"),f["\u0275\u0275elementStart"](22,"h3"),f["\u0275\u0275text"](23,"Advanced Editing Features"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275element"](24,"atlas-rich-text-advanced-editing-example"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"]()),2&e&&(f["\u0275\u0275advance"](1),f["\u0275\u0275property"]("codeExample",f["\u0275\u0275pipeBind1"](2,4,t.basicExample$)),f["\u0275\u0275advance"](6),f["\u0275\u0275property"]("codeExample",f["\u0275\u0275pipeBind1"](8,6,t.markdownExample$)),f["\u0275\u0275advance"](6),f["\u0275\u0275property"]("codeExample",f["\u0275\u0275pipeBind1"](14,8,t.replacementTextExample$)),f["\u0275\u0275advance"](6),f["\u0275\u0275property"]("codeExample",f["\u0275\u0275pipeBind1"](20,10,t.advancedEditingExample$)))},directives:[S.a,v.a,w.a,C,O,H,A],pipes:[a.b],encapsulation:2,changeDetection:0}),e})(),B=(()=>{class e{}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=f["\u0275\u0275defineComponent"]({type:e,selectors:[["atlas-rich-text-features"]],decls:96,vars:0,consts:[[1,"api-description"],[1,"api-table"],[1,"api-header-row"]],template:function(e,t){1&e&&(f["\u0275\u0275elementStart"](0,"section",0),f["\u0275\u0275text"](1," Nearly all of the rich text functionality is grouped into features. Without adding any features, the Rich Text Editor has the same functionality as a textarea element, but these features can add shortcuts and extra tools for the editor. The features provide default toolbar items, but also give you extra toolbar items that you can add and arrange as needed.\n"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](2,"section"),f["\u0275\u0275elementStart"](3,"h3"),f["\u0275\u0275text"](4,"Features"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](5,"table",1),f["\u0275\u0275elementStart"](6,"tr",2),f["\u0275\u0275elementStart"](7,"th"),f["\u0275\u0275text"](8,"Feature"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](9,"th"),f["\u0275\u0275text"](10,"Purpose"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](11,"th"),f["\u0275\u0275text"](12,"Toolbar Items"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](13,"tr"),f["\u0275\u0275elementStart"](14,"td"),f["\u0275\u0275text"](15,"UndoRedo"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](16,"td"),f["\u0275\u0275text"](17,"Provides Undo and Redo functionality and toolbar items. "),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](18,"td"),f["\u0275\u0275text"](19,"undo, redo"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](20,"tr"),f["\u0275\u0275elementStart"](21,"td"),f["\u0275\u0275text"](22,"FontAccent"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](23,"td"),f["\u0275\u0275text"](24,"Allows for simple decoration of fonts, like bold "),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](25,"td"),f["\u0275\u0275text"](26,"bold, italic, underline"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](27,"tr"),f["\u0275\u0275elementStart"](28,"td"),f["\u0275\u0275text"](29,"FontDecoration"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](30,"td"),f["\u0275\u0275text"](31,"Allows for more complex font decorations, like colors. "),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](32,"td"),f["\u0275\u0275text"](33,"fontsizeselect, fontcolor, backcolor"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](34,"tr"),f["\u0275\u0275elementStart"](35,"td"),f["\u0275\u0275text"](36,"List"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](37,"td"),f["\u0275\u0275text"](38,"Allows for formatted lists "),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](39,"td"),f["\u0275\u0275text"](40,"numlist, bullist"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](41,"tr"),f["\u0275\u0275elementStart"](42,"td"),f["\u0275\u0275text"](43,"TextAlignment"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](44,"td"),f["\u0275\u0275text"](45,"Allows for large chunks of text to be aligned to a specific margin. "),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](46,"td"),f["\u0275\u0275text"](47,"alignleft, aligncenter, alignright, alignjustify"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](48,"tr"),f["\u0275\u0275elementStart"](49,"td"),f["\u0275\u0275text"](50,"TextTabbing"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](51,"td"),f["\u0275\u0275text"](52,"Gives a shortcut to add tabs within text "),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](53,"td"),f["\u0275\u0275text"](54,"indent, outdent"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](55,"tr"),f["\u0275\u0275elementStart"](56,"td"),f["\u0275\u0275text"](57,"CharacterCount"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](58,"td"),f["\u0275\u0275text"](59,"The component will show a character count."),f["\u0275\u0275elementEnd"](),f["\u0275\u0275element"](60,"td"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](61,"tr"),f["\u0275\u0275elementStart"](62,"td"),f["\u0275\u0275text"](63,"TextReplacement"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](64,"td"),f["\u0275\u0275text"](65,"Provides the ability to add text placeholders that can be replaced with dynamic content by the consuming application that displays the content created or edited in the rich text input."),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](66,"td"),f["\u0275\u0275text"](67,"placeholder"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](68,"tr"),f["\u0275\u0275elementStart"](69,"td"),f["\u0275\u0275text"](70,"SelectImage"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](71,"td"),f["\u0275\u0275text"](72,"Allows the user to add images that are already hosted elsewhere. This can also be configured to show a list of images."),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](73,"td"),f["\u0275\u0275text"](74,"image"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](75,"tr"),f["\u0275\u0275elementStart"](76,"td"),f["\u0275\u0275text"](77,"UploadImage"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](78,"td"),f["\u0275\u0275text"](79,"Allows the user to upload images to the rich text editor. This includes the functionality from SelectImage."),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](80,"td"),f["\u0275\u0275text"](81,"image"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](82,"tr"),f["\u0275\u0275elementStart"](83,"td"),f["\u0275\u0275text"](84,"Table"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](85,"td"),f["\u0275\u0275text"](86,"Adds options to show and style a table."),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](87,"td"),f["\u0275\u0275text"](88,"table"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](89,"tr"),f["\u0275\u0275elementStart"](90,"td"),f["\u0275\u0275text"](91,"Links"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](92,"td"),f["\u0275\u0275text"](93,"Allows the user to turn text into a hyperlink."),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](94,"td"),f["\u0275\u0275text"](95,"link, unlink"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"]())},encapsulation:2,changeDetection:0}),e})();var L=n("dAE5");let U=(()=>{class e{constructor(){}ngOnInit(){}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=f["\u0275\u0275defineComponent"]({type:e,selectors:[["atlas-rich-text-summary"]],decls:19,vars:0,consts:[["title","rich text input"],[1,"compact"],[1,"api-description"]],template:function(e,t){1&e&&(f["\u0275\u0275elementStart"](0,"atlas-shared-docs-summary",0),f["\u0275\u0275elementStart"](1,"h3",1),f["\u0275\u0275text"](2,"Overview"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](3,"section"),f["\u0275\u0275elementStart"](4,"div",2),f["\u0275\u0275text"](5," The rich text input is a WYSIWYG editor which outputs HTML or markdown. "),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](6,"div",2),f["\u0275\u0275text"](7," When working with content generated by the rich text input, it will include inline styling, which some frameworks like Angular will treat as unsafe HTML. However, the rich text input will sanitize any html that the user attempts to add in, so as long as all possible input is generated by this component, the HTML is generally safe to store and use as-is. "),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](8,"h3",1),f["\u0275\u0275text"](9,"Text Replacement"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementStart"](10,"section"),f["\u0275\u0275elementStart"](11,"div",2),f["\u0275\u0275text"](12," The text replacement feature allows the user to add placeholders which can be found via a simple search and replace, allowing the consuming application to replace the placeholders with dynamic content before rendering the HTML or markdown produced by the rich text input. The output is either "),f["\u0275\u0275elementStart"](13,"code"),f["\u0275\u0275text"](14,'<replacement class="mceNonEditable" expr="val">\\${val}</replacement>'),f["\u0275\u0275elementEnd"](),f["\u0275\u0275text"](15," or "),f["\u0275\u0275elementStart"](16,"code"),f["\u0275\u0275text"](17,"${val}"),f["\u0275\u0275elementEnd"](),f["\u0275\u0275text"](18,", depending on whether the output mode is HTML or Markdown. "),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"](),f["\u0275\u0275elementEnd"]())},directives:[L.a],encapsulation:2,changeDetection:0}),e})();var W=n("is7G");const Y=function(){return["summary","api","features","example"]},N=[{path:"",component:(()=>{class e{constructor(){}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=f["\u0275\u0275defineComponent"]({type:e,selectors:[["atlas-rich-text"]],decls:2,vars:2,consts:[[3,"options"]],template:function(e,t){1&e&&(f["\u0275\u0275elementStart"](0,"atlas-shared-docs-container",0),f["\u0275\u0275element"](1,"router-outlet"),f["\u0275\u0275elementEnd"]()),2&e&&f["\u0275\u0275property"]("options",f["\u0275\u0275pureFunction0"](1,Y))},directives:[W.a,m.n],encapsulation:2,changeDetection:0}),e})(),children:[{path:"summary",component:U},{path:"api",component:g},{path:"features",component:B},{path:"example",component:z},{path:"**",redirectTo:"summary"}]}];let G=(()=>{class e{}return e.\u0275mod=f["\u0275\u0275defineNgModule"]({type:e}),e.\u0275inj=f["\u0275\u0275defineInjector"]({factory:function(t){return new(t||e)},imports:[[m.m.forChild(N)],m.m]}),e})(),J=(()=>{class e{}return e.\u0275mod=f["\u0275\u0275defineNgModule"]({type:e}),e.\u0275inj=f["\u0275\u0275defineInjector"]({factory:function(t){return new(t||e)},imports:[[a.c,G,d.a,o.c,i.o,l.f,r.b,s.o,c.d]]}),e})()}}]);